{"version":3,"file":"mapsExplorerDashboards.chunk.4.js","sources":["/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/map/layer/tms_layer/tms_layer.ts","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/map/map_messages.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\nimport { OpenSearchDashboardsMapLayer } from \"../../..\";\nimport { createRegionBlockedWarning, removeRegionBlockedWarning } from '../../map_messages';\nimport { getEmsTileLayerId, getToasts, getUiSettings } from \"../../../maps_explorer_dashboards_services\";\nimport { getServiceSettings } from \"../../../get_service_settings\";\n/**\n * Construct TmsLayer\n */\n\nexport class TMSLayer extends OpenSearchDashboardsMapLayer {\n  constructor(options, opensearchDashboardsMap, leaflet) {\n    super(opensearchDashboardsMap, options);\n\n    _defineProperty(this, \"_leaflet\", void 0);\n\n    _defineProperty(this, \"_isDesaturated\", void 0);\n\n    this._leaflet = leaflet;\n    this._isDesaturated = options.isDesaturated;\n    this._leafletLayer = null;\n  }\n\n  async decorateOptions(options) {\n    const emsTileLayerId = getEmsTileLayerId();\n\n    try {\n      const serviceSettings = await getServiceSettings();\n      const tmsServices = await serviceSettings.getTMSServices();\n      const userConfiguredTmsLayer = tmsServices[0];\n      const initMapLayer = userConfiguredTmsLayer ? userConfiguredTmsLayer : tmsServices.find(s => s.id === emsTileLayerId.bright);\n\n      if (initMapLayer) {\n        this._opensearchDashboardsMap.setMinZoom(initMapLayer.minZoom);\n\n        this._opensearchDashboardsMap.setMaxZoom(initMapLayer.maxZoom);\n\n        if (this._opensearchDashboardsMap.getZoomLevel() > initMapLayer.maxZoom) {\n          this._opensearchDashboardsMap.setZoomLevel(initMapLayer.maxZoom);\n        }\n\n        let isDesaturated = this._options.isDesaturated;\n\n        if (typeof isDesaturated !== 'boolean') {\n          isDesaturated = false;\n        }\n\n        const isDarkMode = getUiSettings().get('theme:darkMode');\n        const serviceSettings = await getServiceSettings();\n        const meta = await serviceSettings.getAttributesForTMSLayer(initMapLayer, isDesaturated, isDarkMode);\n        const showZoomMessage = serviceSettings.shouldShowZoomMessage(initMapLayer);\n        delete initMapLayer.subdomains;\n        delete initMapLayer.id;\n        const newOptions = { ...initMapLayer,\n          showZoomMessage,\n          ...meta,\n          ...options\n        };\n        return newOptions;\n      }\n    } catch (e) {\n      getToasts().addWarning(e.message);\n      return;\n    }\n\n    return;\n  }\n  /**\n   * Create a new tmsLayer\n   * @returns leafletLayer\n   */\n\n\n  async createLeafletLayer() {\n    let leafletLayer = this._leaflet.tileLayer(this._options.url, {\n      minZoom: this._options.minZoom,\n      maxZoom: this._options.maxZoom,\n      subdomains: this._options.subdomains || [],\n      crossOrigin: true\n    });\n\n    if (leafletLayer) {\n      leafletLayer.on(\"tileload\", () => this._updateDesaturation());\n      leafletLayer.on('tileerror', () => {\n        if (this._options.showRegionBlcokedWarning) {\n          createRegionBlockedWarning();\n        }\n      });\n\n      if (this._options.showZoomMessage) {\n        leafletLayer.on('add', () => {\n          this._opensearchDashboardsMap._addMaxZoomMessage(leafletLayer);\n        });\n      }\n    }\n\n    return leafletLayer;\n  }\n\n  _updateDesaturation() {\n    removeRegionBlockedWarning();\n    const tiles = $('img.leaflet-tile-loaded');\n\n    if (this._isDesaturated) {\n      tiles.removeClass('filters-off');\n    } else {\n      tiles.addClass('filters-off');\n    }\n  }\n\n  setDesaturate(isDesaturated) {\n    if (isDesaturated === this._isDesaturated) {\n      return;\n    }\n\n    this._isDesaturated = isDesaturated;\n\n    this._updateDesaturation();\n\n    if (this._leafletLayer) {\n      this._leafletLayer.redraw();\n    }\n  }\n\n}","/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\n\n/* eslint-disable react/no-multi-comp */\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { FormattedMessage } from '@osd/i18n/react';\nimport { EuiSpacer, EuiButtonEmpty, EuiEmptyPrompt } from '@elastic/eui';\nimport { toMountPoint } from '../../../../src/plugins/opensearch_dashboards_react/public';\nexport const createRegionBlockedWarning = function () {\n  /* eslint-disable react/prefer-stateless-function */\n  class RegionBlockedWarningOverlay extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(EuiEmptyPrompt, {\n        iconType: \"gisApp\",\n        iconColor: null,\n        title: /*#__PURE__*/React.createElement(\"h2\", null, \"The default Web Map Service is currently not available in your region.\"),\n        titleSize: \"xs\",\n        body: /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"You can configure OpenSearch Dashboards to use a different map server for coordinate maps by modifying the default WMS properties.\"))\n      });\n    }\n\n  }\n\n  return () => {\n    let messageBlock = document.getElementById('blocker-div');\n\n    if (!messageBlock) {\n      messageBlock = document.createElement('div');\n      messageBlock.id = 'blocker-div';\n      messageBlock.setAttribute('class', 'visError leaflet-popup-pane');\n      Array.prototype.forEach.call(document.getElementsByClassName('leaflet-container'), leafletDom => {\n        ReactDOM.render(new RegionBlockedWarningOverlay().render(), leafletDom.appendChild(messageBlock));\n      });\n    }\n  };\n}();\nexport const removeRegionBlockedWarning = function () {\n  return () => {\n    const childEle = document.getElementById('blocker-div');\n\n    if (childEle) {\n      childEle.parentNode.removeChild(childEle);\n    }\n  };\n}();\nexport const createZoomWarningMsg = function () {\n  let disableZoomMsg = false;\n\n  const setZoomMsg = boolDisableMsg => disableZoomMsg = boolDisableMsg;\n\n  class ZoomWarning extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        disabled: false\n      };\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"maps_legacy.opensearchDashboardsMap.zoomWarning\",\n        defaultMessage: \"You've reached the maximum number of zoom levels. To zoom all the way in, you can configure your own map server. Please go to { wms } for more information.\",\n        values: {\n          wms: /*#__PURE__*/React.createElement(\"a\", {\n            target: \"_blank\",\n            href: \"https://opensearch.org/docs/latest/dashboards/maptiles/\"\n          }, `Custom WMS Configuration`)\n        }\n      })), /*#__PURE__*/React.createElement(EuiSpacer, {\n        size: \"xs\"\n      }), /*#__PURE__*/React.createElement(EuiButtonEmpty, {\n        size: \"s\",\n        flush: \"left\",\n        isDisabled: this.state.disabled,\n        onClick: () => {\n          this.setState({\n            disabled: true\n          }, () => this.props.onChange(this.state.disabled));\n        },\n        \"data-test-subj\": \"suppressZoomWarnings\"\n      }, `Don't show again`));\n    }\n\n  }\n\n  const zoomToast = {\n    title: 'No additional zoom levels',\n    text: toMountPoint( /*#__PURE__*/React.createElement(ZoomWarning, {\n      onChange: setZoomMsg\n    })),\n    'data-test-subj': 'maxZoomWarning'\n  };\n  return (toastService, getZoomLevel, getMaxZoomLevel) => {\n    return () => {\n      const zoomLevel = getZoomLevel();\n      const maxMapZoom = getMaxZoomLevel();\n\n      if (!disableZoomMsg && zoomLevel === maxMapZoom) {\n        toastService.addDanger(zoomToast);\n      }\n    };\n  };\n}();"],"mappingshsourceRoot":""}