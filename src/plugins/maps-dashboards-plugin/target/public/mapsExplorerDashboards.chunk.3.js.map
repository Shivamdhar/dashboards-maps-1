{"version":3,"file":"mapsExplorerDashboards.chunk.3.js","sources":["/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/common/opensearch_maps_client.js","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/lazy_load_bundle/lazy/index.ts","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/leaflet.js","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/map/map_messages.js","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/map/opensearch_dashboards_map.js","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/map/service_settings.js","/plugin:mapsExplorerDashboards/plugins/maps-dashboards-plugin/public/map/zoom_to_precision.ts"],"sourcesContent":["/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\nimport { EMSClient } from '@elastic/ems-client';\nexport class OpenSearchMapsClient extends EMSClient {\n  constructor(_ref) {\n    let {\n      osdVersion,\n      manifestServiceUrl,\n      language,\n      landingPageUrl,\n      fetchFunction\n    } = _ref;\n    super({\n      osdVersion,\n      manifestServiceUrl,\n      language,\n      landingPageUrl,\n      fetchFunction\n    });\n    this._queryParams = {\n      osd_version: osdVersion,\n      opensearch_tos_agree: true\n    };\n    this._manifestServiceUrl = manifestServiceUrl;\n  }\n\n  async isEnabled() {\n    let result;\n\n    try {\n      result = await this._fetchWithTimeout(this._manifestServiceUrl);\n    } catch (e) {\n      // silently ignoring the exception and returning false.\n      return false;\n    }\n\n    if (result.ok) {\n      const resultJson = await result.json();\n      return resultJson.enabled;\n    }\n\n    return false;\n  }\n\n}","/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\n// @ts-expect-error\nexport { OpenSearchDashboardsMap } from '../../map/opensearch_dashboards_map'; // @ts-expect-error\n\nexport { ServiceSettings } from '../../map/service_settings'; // @ts-expect-error\n\nexport { L } from '../../leaflet';","/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\nif (!window.hasOwnProperty('L')) {\n  require('leaflet/dist/leaflet.css');\n\n  window.L = require('leaflet/dist/leaflet.js');\n  window.L.Browser.touch = false;\n  window.L.Browser.pointer = false;\n\n  require('leaflet-vega');\n\n  require('leaflet.heat/dist/leaflet-heat.js');\n\n  require('leaflet-draw/dist/leaflet.draw.css');\n\n  require('leaflet-draw/dist/leaflet.draw.js');\n\n  require('leaflet-responsive-popup/leaflet.responsive.popup.css');\n\n  require('leaflet-responsive-popup/leaflet.responsive.popup.js');\n}\n\nexport const L = window.L;","/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\n\n/* eslint-disable react/no-multi-comp */\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { FormattedMessage } from '@osd/i18n/react';\nimport { EuiSpacer, EuiButtonEmpty, EuiEmptyPrompt } from '@elastic/eui';\nimport { toMountPoint } from '../../../../src/plugins/opensearch_dashboards_react/public';\nexport const createRegionBlockedWarning = function () {\n  /* eslint-disable react/prefer-stateless-function */\n  class RegionBlockedWarningOverlay extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(EuiEmptyPrompt, {\n        iconType: \"gisApp\",\n        iconColor: null,\n        title: /*#__PURE__*/React.createElement(\"h2\", null, \"The default Web Map Service is currently not available in your region.\"),\n        titleSize: \"xs\",\n        body: /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"You can configure OpenSearch Dashboards to use a different map server for coordinate maps by modifying the default WMS properties.\"))\n      });\n    }\n\n  }\n\n  return () => {\n    let messageBlock = document.getElementById('blocker-div');\n\n    if (!messageBlock) {\n      messageBlock = document.createElement('div');\n      messageBlock.id = 'blocker-div';\n      messageBlock.setAttribute('class', 'visError leaflet-popup-pane');\n      Array.prototype.forEach.call(document.getElementsByClassName('leaflet-container'), leafletDom => {\n        ReactDOM.render(new RegionBlockedWarningOverlay().render(), leafletDom.appendChild(messageBlock));\n      });\n    }\n  };\n}();\nexport const removeRegionBlockedWarning = function () {\n  return () => {\n    const childEle = document.getElementById('blocker-div');\n\n    if (childEle) {\n      childEle.parentNode.removeChild(childEle);\n    }\n  };\n}();\nexport const createZoomWarningMsg = function () {\n  let disableZoomMsg = false;\n\n  const setZoomMsg = boolDisableMsg => disableZoomMsg = boolDisableMsg;\n\n  class ZoomWarning extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        disabled: false\n      };\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"maps_legacy.opensearchDashboardsMap.zoomWarning\",\n        defaultMessage: \"You've reached the maximum number of zoom levels. To zoom all the way in, you can configure your own map server. Please go to { wms } for more information.\",\n        values: {\n          wms: /*#__PURE__*/React.createElement(\"a\", {\n            target: \"_blank\",\n            href: \"https://opensearch.org/docs/latest/dashboards/maptiles/\"\n          }, `Custom WMS Configuration`)\n        }\n      })), /*#__PURE__*/React.createElement(EuiSpacer, {\n        size: \"xs\"\n      }), /*#__PURE__*/React.createElement(EuiButtonEmpty, {\n        size: \"s\",\n        flush: \"left\",\n        isDisabled: this.state.disabled,\n        onClick: () => {\n          this.setState({\n            disabled: true\n          }, () => this.props.onChange(this.state.disabled));\n        },\n        \"data-test-subj\": \"suppressZoomWarnings\"\n      }, `Don't show again`));\n    }\n\n  }\n\n  const zoomToast = {\n    title: 'No additional zoom levels',\n    text: toMountPoint( /*#__PURE__*/React.createElement(ZoomWarning, {\n      onChange: setZoomMsg\n    })),\n    'data-test-subj': 'maxZoomWarning'\n  };\n  return (toastService, getZoomLevel, getMaxZoomLevel) => {\n    return () => {\n      const zoomLevel = getZoomLevel();\n      const maxMapZoom = getMaxZoomLevel();\n\n      if (!disableZoomMsg && zoomLevel === maxMapZoom) {\n        toastService.addDanger(zoomToast);\n      }\n    };\n  };\n}();","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\nimport { EventEmitter } from 'events';\nimport { createZoomWarningMsg } from './map_messages';\nimport $ from 'jquery';\nimport { zoomToPrecision } from './zoom_to_precision';\nimport { i18n } from '@osd/i18n';\nimport { getToasts } from '../maps_explorer_dashboards_services';\nimport { L } from '../leaflet';\n\nfunction makeFitControl(fitContainer, opensearchDashboardsMap) {\n  // eslint-disable-next-line no-undef\n  const FitControl = L.Control.extend({\n    options: {\n      position: 'topleft'\n    },\n    initialize: function (fitContainer, opensearchDashboardsMap) {\n      this._fitContainer = fitContainer;\n      this._opensearchDashboardsMap = opensearchDashboardsMap;\n      this._leafletMap = null;\n    },\n    onAdd: function (leafletMap) {\n      this._leafletMap = leafletMap;\n      const fitDatBoundsLabel = i18n.translate('maps_legacy.opensearchDashboardsMap.leaflet.fitDataBoundsAriaLabel', {\n        defaultMessage: 'Fit Data Bounds'\n      });\n      $(this._fitContainer).html(`<a class=\"kuiIcon fa-crop\" href=\"#\" title=\"${fitDatBoundsLabel}\" aria-label=\"${fitDatBoundsLabel}\"></a>`).on('click', e => {\n        e.preventDefault();\n\n        this._opensearchDashboardsMap.fitToData();\n      });\n      return this._fitContainer;\n    },\n    onRemove: function () {\n      $(this._fitContainer).off('click');\n    }\n  });\n  return new FitControl(fitContainer, opensearchDashboardsMap);\n}\n\nfunction makeLegendControl(container, opensearchDashboardsMap, position) {\n  // eslint-disable-next-line no-undef\n  const LegendControl = L.Control.extend({\n    options: {\n      position: 'topright'\n    },\n    initialize: function (container, opensearchDashboardsMap, position) {\n      this._legendContainer = container;\n      this._opensearchDashboardsMap = opensearchDashboardsMap;\n      this.options.position = position;\n    },\n\n    updateContents() {\n      this._legendContainer.empty();\n\n      const $div = $('<div>').addClass('visMapLegend');\n\n      this._legendContainer.append($div);\n\n      const layers = this._opensearchDashboardsMap.getLayers();\n\n      layers.forEach(layer => layer.appendLegendContents($div));\n    },\n\n    onAdd: function () {\n      this._layerUpdateHandle = () => this.updateContents();\n\n      this._opensearchDashboardsMap.on('layers:update', this._layerUpdateHandle);\n\n      this.updateContents();\n      return this._legendContainer.get(0);\n    },\n    onRemove: function () {\n      this._opensearchDashboardsMap.removeListener('layers:update', this._layerUpdateHandle);\n\n      this._legendContainer.empty();\n    }\n  });\n  return new LegendControl(container, opensearchDashboardsMap, position);\n}\n/**\n * Collects map functionality required for OpenSearch Dashboards.\n * Serves as simple abstraction for leaflet as well.\n */\n\n\nexport class OpenSearchDashboardsMap extends EventEmitter {\n  constructor(containerNode, options) {\n    super();\n\n    _defineProperty(this, \"getZoomLevel\", () => {\n      return this._leafletMap.getZoom();\n    });\n\n    _defineProperty(this, \"getMaxZoomLevel\", () => {\n      return this._leafletMap.getMaxZoom();\n    });\n\n    _defineProperty(this, \"_addMaxZoomMessage\", layer => {\n      const zoomWarningMsg = createZoomWarningMsg(getToasts(), this.getZoomLevel, this.getMaxZoomLevel);\n\n      this._leafletMap.on('zoomend', zoomWarningMsg);\n\n      this._containerNode.setAttribute('data-test-subj', 'zoomWarningEnabled');\n\n      layer.on('remove', () => {\n        this._leafletMap.off('zoomend', zoomWarningMsg);\n\n        this._containerNode.removeAttribute('data-test-subj');\n      });\n    });\n\n    this._containerNode = containerNode;\n    this._leafletDrawControl = null;\n    this._leafletFitControl = null;\n    this._leafletLegendControl = null;\n    this._legendPosition = 'bottomright';\n    this._layers = [];\n    this._listeners = [];\n    this._showTooltip = false;\n    const leafletOptions = {\n      minZoom: options.minZoom,\n      maxZoom: options.maxZoom,\n      center: options.center ? options.center : [0, 0],\n      zoom: options.zoom ? options.zoom : 2,\n      // eslint-disable-next-line no-undef\n      renderer: L.canvas(),\n      zoomAnimation: false,\n      // Desaturate map tiles causes animation rendering artifacts\n      zoomControl: options.zoomControl === undefined ? true : options.zoomControl\n    }; // eslint-disable-next-line no-undef\n\n    this._leafletMap = L.map(containerNode, leafletOptions);\n\n    this._leafletMap.attributionControl.setPrefix('');\n\n    if (!options.scrollWheelZoom) {\n      this._leafletMap.scrollWheelZoom.disable();\n    }\n\n    let previousZoom = this._leafletMap.getZoom();\n\n    this._leafletMap.on('zoomend', () => {\n      if (previousZoom !== this._leafletMap.getZoom()) {\n        previousZoom = this._leafletMap.getZoom();\n        this.emit('zoomchange');\n      }\n    });\n\n    this._leafletMap.on('zoomend', () => this.emit('zoomend'));\n\n    this._leafletMap.on('dragend', () => this.emit('dragend'));\n\n    this._leafletMap.on('zoomend', () => this._updateExtent());\n\n    this._leafletMap.on('dragend', () => this._updateExtent());\n\n    this._leafletMap.on('mousemove', e => this._layers.forEach(layer => layer.movePointer('mousemove', e)));\n\n    this._leafletMap.on('mouseout', e => this._layers.forEach(layer => layer.movePointer('mouseout', e)));\n\n    this._leafletMap.on('mousedown', e => this._layers.forEach(layer => layer.movePointer('mousedown', e)));\n\n    this._leafletMap.on('mouseup', e => this._layers.forEach(layer => layer.movePointer('mouseup', e)));\n\n    this._leafletMap.on('draw:created', event => {\n      const drawType = event.layerType;\n\n      if (drawType === 'rectangle') {\n        const bounds = event.layer.getBounds();\n        const southEast = bounds.getSouthEast();\n        const northWest = bounds.getNorthWest();\n        let southEastLng = southEast.lng;\n\n        if (southEastLng > 180) {\n          southEastLng -= 360;\n        }\n\n        let northWestLng = northWest.lng;\n\n        if (northWestLng < -180) {\n          northWestLng += 360;\n        }\n\n        const southEastLat = southEast.lat;\n        const northWestLat = northWest.lat; //Bounds cannot be created unless they form a box with larger than 0 dimensions\n        //Invalid areas are rejected by OpenSearch.\n\n        if (southEastLat === northWestLat || southEastLng === northWestLng) {\n          return;\n        }\n\n        this.emit('drawCreated:rectangle', {\n          bounds: {\n            bottom_right: {\n              lat: southEastLat,\n              lon: southEastLng\n            },\n            top_left: {\n              lat: northWestLat,\n              lon: northWestLng\n            }\n          }\n        });\n      } else if (drawType === 'polygon') {\n        const latLongs = event.layer.getLatLngs()[0];\n        this.emit('drawCreated:polygon', {\n          points: latLongs.map(leafletLatLng => {\n            return {\n              lat: leafletLatLng.lat,\n              lon: leafletLatLng.lng\n            };\n          })\n        });\n      }\n    });\n\n    this.resize();\n  }\n\n  setShowTooltip(showTooltip) {\n    this._showTooltip = showTooltip;\n  }\n\n  getLayers() {\n    return this._layers.slice();\n  }\n\n  addLayer(opensearchDashboardsLayer) {\n    const onshowTooltip = event => {\n      if (!this._showTooltip) {\n        return;\n      }\n\n      if (!this._popup) {\n        // eslint-disable-next-line no-undef\n        this._popup = new L.ResponsivePopup({\n          autoPan: false\n        });\n\n        this._popup.setLatLng(event.position);\n\n        this._popup.setContent(event.content);\n\n        this._leafletMap.openPopup(this._popup);\n      } else {\n        if (!this._popup.getLatLng().equals(event.position)) {\n          this._popup.setLatLng(event.position);\n        }\n\n        if (this._popup.getContent() !== event.content) {\n          this._popup.setContent(event.content);\n        }\n      }\n    };\n\n    opensearchDashboardsLayer.on('showTooltip', onshowTooltip);\n\n    this._listeners.push({\n      name: 'showTooltip',\n      handle: onshowTooltip,\n      layer: opensearchDashboardsLayer\n    });\n\n    const onHideTooltip = () => {\n      this._leafletMap.closePopup();\n\n      this._popup = null;\n    };\n\n    opensearchDashboardsLayer.on('hideTooltip', onHideTooltip);\n\n    this._listeners.push({\n      name: 'hideTooltip',\n      handle: onHideTooltip,\n      layer: opensearchDashboardsLayer\n    });\n\n    const onStyleChanged = () => {\n      if (this._leafletLegendControl) {\n        this._leafletLegendControl.updateContents();\n      }\n    };\n\n    opensearchDashboardsLayer.on('styleChanged', onStyleChanged);\n\n    this._listeners.push({\n      name: 'styleChanged',\n      handle: onStyleChanged,\n      layer: opensearchDashboardsLayer\n    });\n\n    const onLayerUpdate = () => {\n      this.emit('layers:update');\n    };\n\n    opensearchDashboardsLayer.on('layer:update', onLayerUpdate);\n\n    this._listeners.push({\n      name: 'layer:update',\n      handle: onHideTooltip,\n      layer: opensearchDashboardsLayer\n    });\n\n    this._layers.push(opensearchDashboardsLayer);\n\n    opensearchDashboardsLayer.addToLeafletMap(this._leafletMap);\n    this.emit('layers:update');\n\n    this._addAttributions(opensearchDashboardsLayer.getAttributions());\n  }\n\n  removeLayer(opensearchDashboardsLayer) {\n    if (!opensearchDashboardsLayer) {\n      return;\n    }\n\n    this._removeAttributions(opensearchDashboardsLayer.getAttributions());\n\n    const index = this._layers.indexOf(opensearchDashboardsLayer);\n\n    if (index >= 0) {\n      this._layers.splice(index, 1);\n\n      opensearchDashboardsLayer.removeFromLeafletMap(this._leafletMap);\n    }\n\n    this._listeners.forEach(listener => {\n      if (listener.layer === opensearchDashboardsLayer) {\n        listener.layer.removeListener(listener.name, listener.handle);\n      }\n    }); //must re-add all attributions, because we might have removed dupes\n\n\n    this._layers.forEach(layer => this._addAttributions(layer.getAttributions()));\n  }\n\n  _addAttributions(attribution) {\n    const attributions = getAttributionArray(attribution);\n    attributions.forEach(attribution => {\n      this._leafletMap.attributionControl.removeAttribution(attribution); //this ensures we do not add duplicates\n\n\n      this._leafletMap.attributionControl.addAttribution(attribution);\n    });\n  }\n\n  _removeAttributions(attribution) {\n    const attributions = getAttributionArray(attribution);\n    attributions.forEach(attribution => {\n      this._leafletMap.attributionControl.removeAttribution(attribution); //this ensures we do not add duplicates\n\n    });\n  }\n\n  destroy() {\n    if (this._leafletFitControl) {\n      this._leafletMap.removeControl(this._leafletFitControl);\n    }\n\n    if (this._leafletDrawControl) {\n      this._leafletMap.removeControl(this._leafletDrawControl);\n    }\n\n    if (this._leafletLegendControl) {\n      this._leafletMap.removeControl(this._leafletLegendControl);\n    }\n\n    let layer;\n\n    while (this._layers.length) {\n      layer = this._layers.pop();\n      layer.removeFromLeafletMap(this._leafletMap);\n    }\n\n    this._leafletMap.remove();\n\n    this._containerNode.innerHTML = '';\n\n    this._listeners.forEach(listener => listener.layer.removeListener(listener.name, listener.handle));\n  }\n\n  getCenter() {\n    const center = this._leafletMap.getCenter();\n\n    return {\n      lon: center.lng,\n      lat: center.lat\n    };\n  }\n\n  setCenter(latitude, longitude) {\n    // eslint-disable-next-line no-undef\n    const latLong = L.latLng(latitude, longitude);\n\n    if (latLong.equals && !latLong.equals(this._leafletMap.getCenter())) {\n      this._leafletMap.setView(latLong);\n    }\n  }\n\n  setZoomLevel(zoomLevel) {\n    if (this._leafletMap.getZoom() !== zoomLevel) {\n      this._leafletMap.setZoom(zoomLevel);\n    }\n  }\n\n  getGeohashPrecision() {\n    return zoomToPrecision(this._leafletMap.getZoom(), 12, this._leafletMap.getMaxZoom());\n  }\n\n  getLeafletBounds() {\n    return this._leafletMap.getBounds();\n  }\n\n  getMetersPerPixel() {\n    const pointC = this._leafletMap.latLngToContainerPoint(this._leafletMap.getCenter()); // center (pixels)\n\n\n    const pointX = [pointC.x + 1, pointC.y]; // add one pixel to x\n\n    const pointY = [pointC.x, pointC.y + 1]; // add one pixel to y\n\n    const latLngC = this._leafletMap.containerPointToLatLng(pointC);\n\n    const latLngX = this._leafletMap.containerPointToLatLng(pointX);\n\n    const latLngY = this._leafletMap.containerPointToLatLng(pointY);\n\n    const distanceX = latLngC.distanceTo(latLngX); // calculate distance between c and x (latitude)\n\n    const distanceY = latLngC.distanceTo(latLngY); // calculate distance between c and y (longitude)\n\n    return Math.min(distanceX, distanceY);\n  }\n\n  _getLeafletBounds(resizeOnFail) {\n    const boundsRaw = this._leafletMap.getBounds();\n\n    const bounds = this._leafletMap.wrapLatLngBounds(boundsRaw);\n\n    if (!bounds) {\n      return null;\n    }\n\n    const southEast = bounds.getSouthEast();\n    const northWest = bounds.getNorthWest();\n\n    if (southEast.lng === northWest.lng || southEast.lat === northWest.lat) {\n      if (resizeOnFail) {\n        this._leafletMap.invalidateSize();\n\n        return this._getLeafletBounds(false);\n      } else {\n        return null;\n      }\n    } else {\n      return bounds;\n    }\n  }\n\n  getBounds() {\n    const bounds = this._getLeafletBounds(true);\n\n    if (!bounds) {\n      return null;\n    }\n\n    const southEast = bounds.getSouthEast();\n    const northWest = bounds.getNorthWest();\n    const southEastLng = southEast.lng;\n    const northWestLng = northWest.lng;\n    const southEastLat = southEast.lat;\n    const northWestLat = northWest.lat; // When map has not width or height, the map has no dimensions.\n    // These dimensions are enforced due to CSS style rules that enforce min-width/height of 0\n    // that enforcement also resolves errors with the heatmap layer plugin.\n\n    return {\n      bottom_right: {\n        lat: southEastLat,\n        lon: southEastLng\n      },\n      top_left: {\n        lat: northWestLat,\n        lon: northWestLng\n      }\n    };\n  }\n\n  setDesaturate(isDesaturated) {\n    this._layers.forEach(layer => layer.setDesaturate(isDesaturated));\n  }\n\n  addDrawControl() {\n    const drawColor = '#000';\n    const drawOptions = {\n      draw: {\n        polyline: false,\n        marker: false,\n        circle: false,\n        rectangle: {\n          shapeOptions: {\n            stroke: false,\n            color: drawColor\n          }\n        },\n        polygon: {\n          shapeOptions: {\n            color: drawColor\n          }\n        },\n        circlemarker: false\n      }\n    }; // eslint-disable-next-line no-undef\n\n    this._leafletDrawControl = new L.Control.Draw(drawOptions);\n\n    this._leafletMap.addControl(this._leafletDrawControl);\n  }\n\n  addFitControl() {\n    if (this._leafletFitControl || !this._leafletMap) {\n      return;\n    } // eslint-disable-next-line no-undef\n\n\n    const fitContainer = L.DomUtil.create('div', 'leaflet-control leaflet-bar leaflet-control-fit');\n    this._leafletFitControl = makeFitControl(fitContainer, this);\n\n    this._leafletMap.addControl(this._leafletFitControl);\n  }\n\n  addLegendControl() {\n    if (this._leafletLegendControl || !this._leafletMap) {\n      return;\n    }\n\n    this._updateLegend();\n  }\n\n  setLegendPosition(position) {\n    if (this._legendPosition === position) {\n      if (!this._leafletLegendControl) {\n        this._updateLegend();\n      }\n    } else {\n      this._legendPosition = position;\n\n      this._updateLegend();\n    }\n  }\n\n  _updateLegend() {\n    if (this._leafletLegendControl) {\n      this._leafletMap.removeControl(this._leafletLegendControl);\n    }\n\n    const $wrapper = $('<div>').addClass('visMapLegend__wrapper');\n    this._leafletLegendControl = makeLegendControl($wrapper, this, this._legendPosition);\n\n    this._leafletMap.addControl(this._leafletLegendControl);\n  }\n\n  resize() {\n    this._leafletMap.invalidateSize();\n\n    this._updateExtent();\n  }\n\n  setMinZoom(zoom) {\n    this._leafletMap.setMinZoom(zoom);\n  }\n\n  setMaxZoom(zoom) {\n    this._leafletMap.setMaxZoom(zoom);\n  }\n\n  isInside(bucketRectBounds) {\n    const mapBounds = this._leafletMap.getBounds();\n\n    return mapBounds.intersects(bucketRectBounds);\n  }\n\n  async fitToData() {\n    if (!this._leafletMap) {\n      return;\n    }\n\n    const boundsArray = await Promise.all(this._layers.map(async layer => {\n      return await layer.getBounds();\n    }));\n    let bounds = null;\n    boundsArray.forEach(async b => {\n      if (bounds) {\n        bounds.extend(b);\n      } else {\n        bounds = b;\n      }\n    });\n\n    if (bounds && bounds.isValid()) {\n      this._leafletMap.fitBounds(bounds);\n    }\n  }\n\n  _updateExtent() {\n    this._layers.forEach(layer => layer.updateExtent());\n  }\n\n  persistUiStateForVisualization(visualization) {\n    function persistMapStateInUiState() {\n      const uiState = visualization.getUiState();\n      const centerFromUIState = uiState.get('mapCenter');\n      const zoomFromUiState = parseInt(uiState.get('mapZoom'));\n\n      if (isNaN(zoomFromUiState) || this.getZoomLevel() !== zoomFromUiState) {\n        visualization.uiStateVal('mapZoom', this.getZoomLevel());\n      }\n\n      const centerFromMap = this.getCenter();\n\n      if (!centerFromUIState || centerFromMap.lon !== centerFromUIState[1] || centerFromMap.lat !== centerFromUIState[0]) {\n        visualization.uiStateVal('mapCenter', [centerFromMap.lat, centerFromMap.lon]);\n      }\n    }\n\n    this._leafletMap.on('resize', () => {\n      visualization.sessionState.mapBounds = this.getBounds();\n    });\n\n    this._leafletMap.on('load', () => {\n      visualization.sessionState.mapBounds = this.getBounds();\n    });\n\n    this.on('dragend', persistMapStateInUiState);\n    this.on('zoomend', persistMapStateInUiState);\n  }\n\n  useUiStateFromVisualization(visualization) {\n    const uiState = visualization.getUiState();\n    const zoomFromUiState = parseInt(uiState.get('mapZoom'));\n    const centerFromUIState = uiState.get('mapCenter');\n\n    if (!isNaN(zoomFromUiState)) {\n      this.setZoomLevel(zoomFromUiState);\n    }\n\n    if (centerFromUIState) {\n      this.setCenter(centerFromUIState[0], centerFromUIState[1]);\n    }\n  }\n\n}\n\nfunction getAttributionArray(attribution) {\n  const attributionString = attribution || '';\n  let attributions = attributionString.split(/\\s*\\|\\s*/);\n\n  if (attributions.length === 1) {\n    //temp work-around due to inconsistency in manifests of how attributions are delimited\n    attributions = attributions[0].split(',');\n  }\n\n  return attributions;\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\nimport _ from 'lodash';\nimport MarkdownIt from 'markdown-it';\nimport { EMSClient } from '@elastic/ems-client';\nimport { OpenSearchMapsClient } from '../common/opensearch_maps_client.js';\nimport { i18n } from '@osd/i18n';\nimport { getOpenSearchDashboardsVersion } from '../maps_explorer_dashboards_services';\nimport { ORIGIN } from '../common/constants/origin';\nconst TMS_IN_YML_ID = 'TMS in config/opensearch_dashboards.yml';\nexport class ServiceSettings {\n  constructor(mapConfig, tilemapsConfig) {\n    _defineProperty(this, \"_backfillSettings\", fileLayer => {\n      // Older version of OpenSearch Dashboards stored EMS state in the URL-params\n      // Creates object literal with required parameters as key-value pairs\n      const format = fileLayer.getDefaultFormatType();\n      const meta = fileLayer.getDefaultFormatMeta();\n      return {\n        name: fileLayer.getDisplayName(),\n        origin: fileLayer.getOrigin(),\n        id: fileLayer.getId(),\n        created_at: fileLayer.getCreatedAt(),\n        attribution: getAttributionString(fileLayer),\n        fields: fileLayer.getFieldsInLanguage(),\n        format: format,\n        //legacy: format and meta are split up\n        meta: meta //legacy, format and meta are split up\n\n      };\n    });\n\n    this._mapConfig = mapConfig;\n    this._tilemapsConfig = tilemapsConfig;\n    this._hasTmsConfigured = typeof tilemapsConfig.url === 'string' && tilemapsConfig.url !== '';\n    this._showZoomMessage = true;\n    this._emsClient = null;\n    this._opensearchMapsClient = new OpenSearchMapsClient({\n      language: i18n.getLocale(),\n      appVersion: getOpenSearchDashboardsVersion(),\n      appName: 'opensearch-dashboards',\n      fileApiUrl: this._mapConfig.emsFileApiUrl,\n      tileApiUrl: this._mapConfig.emsTileApiUrl,\n      landingPageUrl: '',\n      manifestServiceUrl: this._mapConfig.opensearchManifestServiceUrl,\n      // Wrap to avoid errors passing window fetch\n      fetchFunction: function () {\n        return fetch(...arguments);\n      }\n    });\n    this.getTMSOptions();\n  }\n\n  getTMSOptions() {\n    const markdownIt = new MarkdownIt({\n      html: false,\n      linkify: true\n    }); // TMS Options\n\n    this.tmsOptionsFromConfig = _.assign({}, this._tilemapsConfig.options, {\n      attribution: _.escape(markdownIt.render(this._tilemapsConfig.options.attribution || '')),\n      url: this._tilemapsConfig.url\n    });\n  }\n\n  shouldShowZoomMessage(_ref) {\n    let {\n      origin\n    } = _ref;\n    return origin === ORIGIN.EMS && this._showZoomMessage;\n  }\n\n  enableZoomMessage() {\n    this._showZoomMessage = true;\n  }\n\n  disableZoomMessage() {\n    this._showZoomMessage = false;\n  }\n\n  __debugStubManifestCalls(manifestRetrieval) {\n    this._emsClient = this._opensearchMapsClient;\n    const oldGetManifest = this._emsClient.getManifest;\n    this._emsClient.getManifest = manifestRetrieval;\n    return {\n      removeStub: () => {\n        delete this._emsClient.getManifest; //not strictly necessary since this is prototype method\n\n        if (this._emsClient.getManifest !== oldGetManifest) {\n          this._emsClient.getManifest = oldGetManifest;\n        }\n      }\n    };\n  }\n\n  // anyone using this._emsClient should call this method before, to set the right client\n  async _setMapServices() {\n    // if client is not null, return immediately.\n    // Effectively, client creation will be called only once.\n    if (this._emsClient) {\n      return;\n    }\n\n    const useOpenSearchMaps = await this._opensearchMapsClient.isEnabled();\n\n    if (useOpenSearchMaps) {\n      // using OpenSearch Maps.\n      this._emsClient = this._opensearchMapsClient;\n    } else {\n      // not using OpenSearch Maps, fallback to default maps.\n      this._emsClient = new EMSClient({\n        language: i18n.getLocale(),\n        appVersion: getOpenSearchDashboardsVersion(),\n        appName: 'opensearch-dashboards',\n        fileApiUrl: this._mapConfig.emsFileApiUrl,\n        tileApiUrl: this._mapConfig.emsTileApiUrl,\n        landingPageUrl: this._mapConfig.emsLandingPageUrl,\n        fetchFunction: function () {\n          return fetch(...arguments);\n        }\n      });\n    }\n  }\n\n  async getFileLayers() {\n    if (!this._mapConfig.includeOpenSearchMapsService) {\n      return [];\n    }\n\n    await this._setMapServices();\n    const fileLayers = await this._emsClient.getFileLayers();\n    return fileLayers.map(this._backfillSettings);\n  }\n  /**\n   * Returns all the services published by EMS (if configures)\n   * It also includes the service configured in tilemap (override)\n   */\n\n\n  async getTMSServices() {\n    let allServices = [];\n\n    if (this._hasTmsConfigured) {\n      //use tilemap.* settings from yml\n      const tmsService = _.cloneDeep(this.tmsOptionsFromConfig);\n\n      tmsService.id = TMS_IN_YML_ID;\n      tmsService.origin = ORIGIN.OPENSEARCH_DASHBOARDS_YML;\n      allServices.push(tmsService);\n    }\n\n    await this._setMapServices();\n\n    if (this._mapConfig.includeOpenSearchMapsService) {\n      const servicesFromManifest = await this._emsClient.getTMSServices();\n      const strippedServiceFromManifest = await Promise.all(servicesFromManifest.filter(tmsService => tmsService.getId() === this._mapConfig.emsTileLayerId.bright).map(async tmsService => {\n        //shim for compatibility\n        return {\n          origin: tmsService.getOrigin(),\n          id: tmsService.getId(),\n          minZoom: await tmsService.getMinZoom(),\n          maxZoom: await tmsService.getMaxZoom(),\n          attribution: getAttributionString(tmsService)\n        };\n      }));\n      allServices = allServices.concat(strippedServiceFromManifest);\n    }\n\n    return allServices;\n  }\n  /**\n   * Set optional query-parameters for all requests\n   *\n   * @param additionalQueryParams\n   */\n\n\n  setQueryParams(additionalQueryParams) {\n    // Functions more as a \"set\" than an \"add\" in ems-client\n    this._emsClient.addQueryParams(additionalQueryParams);\n  }\n\n  async getFileLayerFromConfig(fileLayerConfig) {\n    const fileLayers = await this._emsClient.getFileLayers();\n    return fileLayers.find(fileLayer => {\n      const hasIdByName = fileLayer.hasId(fileLayerConfig.name); //legacy\n\n      const hasIdById = fileLayer.hasId(fileLayerConfig.id);\n      return hasIdByName || hasIdById;\n    });\n  }\n\n  async getEMSHotLink(fileLayerConfig) {\n    await this._setMapServices();\n    const layer = await this.getFileLayerFromConfig(fileLayerConfig);\n    return layer ? layer.getEMSHotLink() : null;\n  }\n\n  async loadFileLayerConfig(fileLayerConfig) {\n    const fileLayer = await this.getFileLayerFromConfig(fileLayerConfig);\n    return fileLayer ? this._backfillSettings(fileLayer) : null;\n  }\n\n  async _getAttributesForEMSTMSLayer(isDesaturated, isDarkMode) {\n    await this._setMapServices();\n    const tmsServices = await this._emsClient.getTMSServices();\n    const emsTileLayerId = this._mapConfig.emsTileLayerId;\n    let serviceId;\n\n    if (isDarkMode) {\n      serviceId = emsTileLayerId.dark;\n    } else {\n      if (isDesaturated) {\n        serviceId = emsTileLayerId.desaturated;\n      } else {\n        serviceId = emsTileLayerId.bright;\n      }\n    }\n\n    const tmsService = tmsServices.find(service => {\n      return service.getId() === serviceId;\n    });\n    return {\n      url: await tmsService.getUrlTemplate(),\n      minZoom: await tmsService.getMinZoom(),\n      maxZoom: await tmsService.getMaxZoom(),\n      attribution: getAttributionString(tmsService),\n      origin: ORIGIN.EMS\n    };\n  }\n\n  async getAttributesForTMSLayer(tmsServiceConfig, isDesaturated, isDarkMode) {\n    if (tmsServiceConfig.origin === ORIGIN.EMS) {\n      return this._getAttributesForEMSTMSLayer(isDesaturated, isDarkMode);\n    } else if (tmsServiceConfig.origin === ORIGIN.OPENSEARCH_DASHBOARDS_YML) {\n      const attrs = _.pick(this._tilemapsConfig, ['url', 'minzoom', 'maxzoom', 'attribution']);\n\n      return { ...attrs,\n        ...{\n          origin: ORIGIN.OPENSEARCH_DASHBOARDS_YML\n        }\n      };\n    } else {\n      //this is an older config. need to resolve this dynamically.\n      if (tmsServiceConfig.id === TMS_IN_YML_ID) {\n        const attrs = _.pick(this._tilemapsConfig, ['url', 'minzoom', 'maxzoom', 'attribution']);\n\n        return { ...attrs,\n          ...{\n            origin: ORIGIN.OPENSEARCH_DASHBOARDS_YML\n          }\n        };\n      } else {\n        //assume ems\n        return this._getAttributesForEMSTMSLayer(isDesaturated, isDarkMode);\n      }\n    }\n  }\n\n  async _getFileUrlFromEMS(fileLayerConfig) {\n    await this._setMapServices();\n    const fileLayers = await this._emsClient.getFileLayers();\n    const layer = fileLayers.find(fileLayer => {\n      const hasIdByName = fileLayer.hasId(fileLayerConfig.name); //legacy\n\n      const hasIdById = fileLayer.hasId(fileLayerConfig.id);\n      return hasIdByName || hasIdById;\n    });\n\n    if (layer) {\n      return layer.getDefaultFormatUrl();\n    } else {\n      throw new Error(`File  ${fileLayerConfig.name} not recognized`);\n    }\n  }\n\n  async getUrlForRegionLayer(fileLayerConfig) {\n    let url;\n\n    if (fileLayerConfig.origin === ORIGIN.EMS) {\n      url = this._getFileUrlFromEMS(fileLayerConfig);\n    } else if (fileLayerConfig.layerId && fileLayerConfig.layerId.startsWith(`${ORIGIN.EMS}.`)) {\n      //fallback for older saved objects\n      url = this._getFileUrlFromEMS(fileLayerConfig);\n    } else if (fileLayerConfig.layerId && fileLayerConfig.layerId.startsWith(`${ORIGIN.OPENSEARCH_DASHBOARDS_YML}.`)) {\n      //fallback for older saved objects\n      url = fileLayerConfig.url;\n    } else {\n      //generic fallback\n      url = fileLayerConfig.url;\n    }\n\n    return url;\n  }\n\n  async getJsonForRegionLayer(fileLayerConfig) {\n    const url = await this.getUrlForRegionLayer(fileLayerConfig);\n    const response = await fetch(url);\n    return await response.json();\n  }\n\n}\n\nfunction getAttributionString(emsService) {\n  const attributions = emsService.getAttributions();\n  const attributionSnippets = attributions.map(attribution => {\n    const anchorTag = document.createElement('a');\n    anchorTag.setAttribute('rel', 'noreferrer noopener');\n\n    if (attribution.url.startsWith('http://') || attribution.url.startsWith('https://')) {\n      anchorTag.setAttribute('href', attribution.url);\n    }\n\n    anchorTag.textContent = attribution.label;\n    return anchorTag.outerHTML;\n  });\n  return attributionSnippets.join(' | '); //!!!this is the current convention used in OpenSearch Dashboards\n}","/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\nimport { geohashColumns } from './decode_geo_hash';\nconst defaultMaxPrecision = 12;\nconst minGeoHashPixels = 16;\n\nconst calculateZoomToPrecisionMap = maxZoom => {\n  /**\n   * Map Leaflet zoom levels to geohash precision levels.\n   * The size of a geohash column-width on the map should be at least `minGeohashPixels` pixels wide.\n   */\n  const zoomPrecisionMap = new Map();\n\n  for (let zoom = 0; zoom <= maxZoom; zoom += 1) {\n    if (typeof zoomPrecisionMap.get(zoom) === 'number') {\n      continue;\n    }\n\n    const worldPixels = 256 * Math.pow(2, zoom);\n    zoomPrecisionMap.set(zoom, 1);\n\n    for (let precision = 2; precision <= defaultMaxPrecision; precision += 1) {\n      const columns = geohashColumns(precision);\n\n      if (worldPixels / columns >= minGeoHashPixels) {\n        zoomPrecisionMap.set(zoom, precision);\n      } else {\n        break;\n      }\n    }\n  }\n\n  return zoomPrecisionMap;\n};\n\nexport function zoomToPrecision(mapZoom, maxPrecision, maxZoom) {\n  const zoomPrecisionMap = calculateZoomToPrecisionMap(typeof maxZoom === 'number' ? maxZoom : 21);\n  const precision = zoomPrecisionMap.get(mapZoom);\n  return precision ? Math.min(precision, maxPrecision) : maxPrecision;\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnxtrsourceRoot":""}